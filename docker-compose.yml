services:
    app:
        build:
            context: ./docker/app
            dockerfile: Dockerfile
            args:
                UID: '${WWWUSER:-1000}'
                GID: '${WWWGROUP:-1000}'
        image: books-app
        container_name: test-books-app
        volumes:
            - '.:/var/www/html'
        networks:
            - test-books
    nginx:
        image: 'nginx:stable-alpine'
        container_name: test-books-nginx
        ports:
            - '${APP_PORT:-80}:80'
        volumes:
            - '.:/var/www/html'
            - './docker/nginx:/etc/nginx/conf.d'
        networks:
            - test-books
        depends_on:
            - app
    db:
        container_name: test-books-db
        image: 'mysql/mysql-server:8.0'
        ports:
            - '3306:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - 'mysql:/var/lib/mysql'
            - './docker/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'
        networks:
            - test-books
        healthcheck:
            test:
                - CMD
                - mysqladmin
                - ping
                - '-p${DB_PASSWORD}'
            retries: 3
            timeout: 5s
    redis:
        container_name: test-books-redis
        image: 'redis:alpine'
        ports:
            - '6379:6379'
        volumes:
            - 'redis:/data'
        networks:
            - test-books
        healthcheck:
            test:
                - CMD
                - redis-cli
                - ping
            retries: 3
            timeout: 5s
networks:
    test-books:
        driver: bridge
volumes:
    mysql:
        driver: local
    redis:
        driver: local
